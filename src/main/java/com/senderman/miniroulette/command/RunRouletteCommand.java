package com.senderman.miniroulette.command;

import com.annimon.tgbotsmodule.commands.context.MessageContext;
import com.senderman.miniroulette.game.Game;
import com.senderman.miniroulette.game.GameManager;
import com.senderman.miniroulette.game.Player;
import com.senderman.miniroulette.game.bet.Bet;
import com.senderman.miniroulette.model.User;
import com.senderman.miniroulette.service.UserService;
import com.senderman.miniroulette.util.Html;
import jakarta.inject.Singleton;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.Objects;

@Singleton
public class RunRouletteCommand implements CommandExecutor {

    private final static String gameField = """
            üé∞ –î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏
                        
            0üíö\s
            1‚ù§Ô∏è 2üñ§ 3‚ù§Ô∏è 4üñ§ 5‚ù§Ô∏è 6üñ§
            7‚ù§Ô∏è 8üñ§ 9‚ù§Ô∏è 10üñ§ 11‚ù§Ô∏è 12üñ§""";

    private final GameManager<Long> gameManager;
    private final UserService userService;

    public RunRouletteCommand(GameManager<Long> gameManager, UserService userService) {
        this.gameManager = gameManager;
        this.userService = userService;
    }

    @Override
    public String command() {
        return "/rourun";
    }

    @Override
    public void accept(@NotNull MessageContext ctx) {
        var chatId = ctx.chatId();
        if (gameManager.exists(chatId)) {
            ctx.replyToMessage("–†—É–ª–µ—Ç–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!").callAsync(ctx.sender);
            return;
        }
        var game = new Game<>(chatId, g -> onSpin(g, ctx), g -> onGameEnd(g, ctx));
        gameManager.save(game);
        ctx.reply(gameField).callAsync(ctx.sender);
    }

    private void onSpin(Game<Long> game, MessageContext ctx) {
        ctx.reply("‚ùáÔ∏è –°—Ç–∞–≤–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å, —Å—Ç–∞–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç").callAsync(ctx.sender);
    }

    private void onGameEnd(Game<Long> game, MessageContext ctx) {
        int cell = Objects.requireNonNull(game.getCurrentCell());
        var players = game.getPlayers();
        var text = new StringBuilder("\uD83C\uDFB2 –ò—Ç–æ–≥–∏:\n");
        text.append(formatCell(cell)).append("\n\n");

        var usersToSave = new ArrayList<User>();
        for (var p : players) {
            var user = userService.findById(p.getId());
            text.append("<b>").append(Html.htmlSafe(p.getName())).append("</b>:\n");
            p.getBets()
                    .stream()
                    .map(b -> formatBet(b, cell))
                    .forEach(b -> text.append(b).append("\n"));
            final int pendingCoins = p.getBets()
                    .stream()
                    .mapToInt(Bet::getAmount)
                    .sum();
            text.append(formatStonks(p));
            text.append("\n");
            user.setPendingCoins(user.getPendingCoins() - pendingCoins);
            user.setCoins(user.getCoins() + p.getIncome());
            usersToSave.add(user);
        }
        userService.saveAll(usersToSave);
        ctx.reply(text.toString()).callAsync(ctx.sender);
        gameManager.delete(game.getId());
    }

    private String formatCell(int value) {
        if (value == 0)
            return "\uD83D\uDC9A 0";

        return (value % 2 == 0 ? "\uD83D\uDDA4" : "‚ù§Ô∏è") + value;
    }

    private String formatBet(Bet b, int cell) {
        boolean isWin = b.isWin(cell);
        var emoji = isWin ? "\uD83D\uDE0E" : "\uD83D\uDE14";
        var sign = isWin ? "+" : "-";
        int cash = isWin ? b.getPay() : b.getAmount();
        return "%s %s%d (%d –Ω–∞ %s)".formatted(emoji, sign, cash, b.getAmount(), b.getTargetAsString());
    }

    private String formatStonks(Player p) {
        final String emoji;
        if (p.getDelta() == 0)
            emoji = "0Ô∏è‚É£";
        else if (p.getDelta() > 0)
            emoji = "\uD83D\uDCC8";
        else
            emoji = "\uD83D\uDCC9";
        return "%s %d".formatted(emoji, p.getDelta());
    }
}
